// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  firstName         String
  lastName          String
  avatar            String             @db.Text
  identityProviders IdentityProvider[]
  memberships       Member[]
  workspaces        Workspace[]
  invitations       Invitation[]
  reviewUsers       ReviewUser[]
  messages          Message[]
  threads           Thread[]
  points            Point[]
}

model IdentityProvider {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  providerId String
  provider   Provider

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Invitation {
  id          String     @id
  createdAt   DateTime   @default(now())
  email       String
  role        MemberRole
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  invitedBy   User       @relation(fields: [invitedById], references: [id])
  invitedById Int
  workspaceId String

  @@unique([email, workspaceId])
  @@index([workspaceId])
  @@index([invitedById])
}

model Member {
  id                   Int        @id @default(autoincrement())
  user                 User       @relation(fields: [userId], references: [id])
  userId               Int
  workspaceId          String
  invitationAcceptedAt DateTime?
  role                 MemberRole
  workspace            Workspace  @relation(fields: [workspaceId], references: [id])

  @@index([userId])
  @@index([workspaceId])
}

model Workspace {
  id          String       @id
  name        String
  description String       @db.Text
  members     Member[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?
  invitations Invitation[]
  review      Review[]

  @@index([userId])
}

model File {
  id               Int       @id @default(autoincrement())
  storedKey        String
  originalFilename String
  size             Int
  createdAt        DateTime  @default(now())
  review           Review[]
  messages         Message[]
}

enum ReviewUserRole {
  OWNER
  REVIEWER
  VIEWER
}

model ReviewUser {
  id          Int            @id @default(autoincrement())
  user        User           @relation(fields: [userId], references: [id])
  userId      Int
  role        ReviewUserRole
  inviteToken String?
  inviteEmail String?
  Review      Review?        @relation(fields: [reviewId], references: [id])
  reviewId    String?

  @@index([userId])
  @@index([reviewId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  sentBy    User     @relation(fields: [sentById], references: [id])
  sentById  Int
  files     File[]
  threads   Thread[]

  @@index([sentById])
}

model Point {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  Int
  xPath        String
  xPercentage  Float
  yPercentage  Float
  threads      Thread[]
  browser      String
  os           String
  isMobile     Boolean?
  windowWidth  Int
  windowHeight Int

  @@index([createdById])
}

model Thread {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  messages    Message[]
  startedBy   User      @relation(fields: [startedById], references: [id])
  startedById Int
  review      Review    @relation(fields: [reviewId], references: [id])
  reviewId    String
  pointId     Int
  point       Point     @relation(fields: [pointId], references: [id])

  @@index([reviewId])
  @@index([pointId])
  @@index([startedById])
}

model Review {
  id          String       @id
  type        ReviewType
  title       String
  token       String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String
  url         String?
  file        File?        @relation(fields: [fileId], references: [id])
  fileId      Int?
  users       ReviewUser[]
  createdAt   DateTime     @default(now())
  threads     Thread[]

  @@index([fileId])
  @@index([workspaceId])
}

enum ReviewType {
  FILE
  URL
}

enum Provider {
  GOOGLE
  FACEBOOK
  GITHUB
}
